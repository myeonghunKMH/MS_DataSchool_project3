trigger:
- main

variables:
  # --- 서비스 연결 이름 ---
  dockerRegistryServiceConnection: 'acr-connection'
  azureServiceConnection: 'azure-aks-connection'

  # --- Azure 리소스 정보 ---
  azureResourceGroup: '1dt-final-team1'
  kubernetesCluster: '1dt-team1-aks'
  azureContainerRegistry: '1dtteam1registry.azurecr.io'
  
  # --- 애플리케이션 및 이미지 정보 ---
  imageRepository: 'itc-app'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

pool:
  name: Default

stages:
- stage: Build
  displayName: 'Stage 1: Build and Push'
  jobs:
  - job: BuildJob
    displayName: 'Build and Push Job'
    steps:
    - task: Docker@2
      displayName: 'Build and Push image to ACR'
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Kubernetes manifests'
      inputs:
        targetPath: '$(Build.SourcesDirectory)/k8s'
        artifact: 'manifests'
        publishLocation: 'pipeline'

- stage: Deploy
  displayName: 'Stage 2: Deploy to AKS'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployJob
    displayName: 'Deploy to AKS Job'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Kubernetes manifests'
            inputs:
              artifact: 'manifests'
              path: '$(Pipeline.Workspace)/manifests'

          - task: replacetokens@3
            displayName: 'Replace image token in deployment.yaml'
            inputs:
              targetFiles: '$(Pipeline.Workspace)/manifests/deployment.yaml'
              encoding: 'auto'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              tokenPrefix: '__'
              tokenSuffix: '__'
              useLegacyPattern: false
              variables: 'IMAGE = $(azureContainerRegistry)/$(imageRepository):$(tag)'

          - task: AzureCLI@2
            displayName: 'Login to Azure CLI'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Successfully logged in to Azure."

          - script: |
              set -e
              KUBELOGIN_VERSION="v0.1.0"
              echo "Downloading kubelogin..."
              curl -sL "https://github.com/Azure/kubelogin/releases/download/${KUBELOGIN_VERSION}/kubelogin-linux-amd64.zip" -o kubelogin.zip
              unzip -q kubelogin.zip
              echo "Installing kubelogin..."
              sudo mv bin/linux_amd64/kubelogin /usr/local/bin
              rm kubelogin.zip
              echo "kubelogin installed successfully."
            displayName: 'Install kubelogin for Entra ID'

          - task: AzureCLI@2
            displayName: 'Get AKS credentials and Deploy'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -e
                echo "Getting AKS credentials..."
                az aks get-credentials --resource-group $(azureResourceGroup) --name $(kubernetesCluster) --overwrite-existing
                
                echo "Applying Kubernetes manifests..."
                kubectl apply -f $(Pipeline.Workspace)/manifests

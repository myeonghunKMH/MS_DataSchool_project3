trigger:
- main

variables:
  # 1. DevOps 라이브러리에서 생성할 변수 그룹을 참조합니다.
  - group: itc-app-secrets

  # 2. 파이프라인 고정 변수들입니다.
  dockerRegistryServiceConnection: 'acr-connection'
  azureServiceConnection: 'azure-aks-connection'
  azureResourceGroup: '1dt-final-team1'
  kubernetesCluster: '1dt-team1-aks'
  azureContainerRegistry: '1dtteam1registry.azurecr.io'
  imageRepository: 'itc-app'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  imageFullName: '$(azureContainerRegistry)/$(imageRepository):$(tag)'

pool:
  name: Default

stages:
- stage: Build
  displayName: 'Stage 1: Build and Push'
  jobs:
  - job: BuildJob
    displayName: 'Build and Push Job'
    steps:
    - task: Docker@2
      displayName: 'Build and Push image to ACR'
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: '$(tag)'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Kubernetes manifests'
      inputs:
        targetPath: '$(Build.SourcesDirectory)/k8s'
        artifact: 'manifests'

- stage: Deploy
  displayName: 'Stage 2: Deploy to AKS'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployJob
    displayName: 'Deploy to AKS Job'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Kubernetes manifests'
            inputs:
              artifact: 'manifests'
              path: '$(Pipeline.Workspace)/manifests'

          - task: replacetokens@3
            displayName: 'Replace image token'
            inputs:
              targetFiles: '$(Pipeline.Workspace)/manifests/deployment.yaml'

          - task: AzureCLI@2
            displayName: 'Deploy to AKS using Admin Credentials'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              env:
                DB_HOST: $(DB_HOST)
                DB_PORT: $(DB_PORT)
                DB_USER: $(DB_USER)
                DB_PASSWORD: $(DB_PASSWORD)
                DB_NAME: $(DB_NAME)
                KEYCLOAK_REALM: $(KEYCLOAK_REALM)
                KEYCLOAK_CLIENT_ID: $(KEYCLOAK_CLIENT_ID)
                KEYCLOAK_SERVER_URL: $(KEYCLOAK_SERVER_URL)
                KEYCLOAK_PUBLIC_KEY: $(KEYCLOAK_PUBLIC_KEY)
                KEYCLOAK_ADMIN_CLIENT_ID: $(KEYCLOAK_ADMIN_CLIENT_ID)
                KEYCLOAK_ADMIN_CLIENT_SECRET: $(KEYCLOAK_ADMIN_CLIENT_SECRET)
                SMTP_HOST: $(SMTP_HOST)
                SMTP_PORT: $(SMTP_PORT)
                SMTP_USER: $(SMTP_USER)
                SMTP_PASS: $(SMTP_PASS)
                SMTP_FROM_EMAIL: $(SMTP_FROM_EMAIL)
              inlineScript: |
                set -e
                echo "Getting AKS admin credentials..."
                az aks get-credentials --resource-group $(azureResourceGroup) --name $(kubernetesCluster) --admin --overwrite-existing
                
                echo "Ensuring namespace 'itc' exists..."
                kubectl create namespace itc || echo "Namespace 'itc' already exists."

                echo "Creating or updating Kubernetes secret..."
                kubectl create secret generic itc-app-secret -n itc \
                  --from-literal=DB_HOST="$DB_HOST" \
                  --from-literal=DB_PORT="$DB_PORT" \
                  --from-literal=DB_USER="$DB_USER" \
                  --from-literal=DB_PASSWORD="$DB_PASSWORD" \
                  --from-literal=DB_NAME="$DB_NAME" \
                  --from-literal=KEYCLOAK_REALM="$KEYCLOAK_REALM" \
                  --from-literal=KEYCLOAK_CLIENT_ID="$KEYCLOAK_CLIENT_ID" \
                  --from-literal=KEYCLOAK_SERVER_URL="$KEYCLOAK_SERVER_URL" \
                  --from-literal=KEYCLOAK_PUBLIC_KEY="$KEYCLOAK_PUBLIC_KEY" \
                  --from-literal=KEYCLOAK_ADMIN_CLIENT_ID="$KEYCLOAK_ADMIN_CLIENT_ID" \
                  --from-literal=KEYCLOAK_ADMIN_CLIENT_SECRET="$KEYCLOAK_ADMIN_CLIENT_SECRET" \
                  --from-literal=SMTP_HOST="$SMTP_HOST" \
                  --from-literal=SMTP_PORT="$SMTP_PORT" \
                  --from-literal=SMTP_USER="$SMTP_USER" \
                  --from-literal=SMTP_PASS="$SMTP_PASS" \
                  --from-literal=SMTP_FROM_EMAIL="$SMTP_FROM_EMAIL" \
                  --dry-run=client -o yaml | kubectl apply -f -

                echo "Applying Kubernetes manifests to 'itc' namespace..."
                kubectl apply -f $(Pipeline.Workspace)/manifests --namespace itc
